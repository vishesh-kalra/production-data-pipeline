version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-pipeline-network

  mongo:
    image: mongo:7
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-pipeline-network

  pipeline-finance:
    build: ./pipeline
    restart: always
    environment:
      INDUSTRY: finance
      POSTGRES_HOST: postgres
      MONGO_HOST: mongo
      DB_PASSWORD: ${DB_PASSWORD}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: python scheduler.py --industry finance
    networks:
      - data-pipeline-network

  pipeline-healthcare:
    build: ./pipeline
    restart: always
    environment:
      INDUSTRY: healthcare
      POSTGRES_HOST: postgres
      MONGO_HOST: mongo
      DB_PASSWORD: ${DB_PASSWORD}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: python scheduler.py --industry healthcare
    networks:
      - data-pipeline-network

  pipeline-supply-chain:
    build: ./pipeline
    restart: always
    environment:
      INDUSTRY: supply_chain
      POSTGRES_HOST: postgres
      MONGO_HOST: mongo
      DB_PASSWORD: ${DB_PASSWORD}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: python scheduler.py --industry supply_chain
    networks:
      - data-pipeline-network

  api-backend:
    build: ./api
    restart: always
    environment:
      POSTGRES_HOST: postgres
      MONGO_HOST: mongo
      DB_PASSWORD: ${DB_PASSWORD}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - data-pipeline-network

  dashboard-frontend:
    build: ./dashboard
    restart: always
    environment:
      STREAMLIT_SERVER_PORT: 8501
      API_BASE_URL: http://api-backend:8000
    ports:
      - "8501:8501"
    depends_on:
      - api-backend
    networks:
      - data-pipeline-network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-backend
      - dashboard-frontend
    networks:
      - data-pipeline-network

volumes:
  postgres_data:
  mongo_data:

networks:
  data-pipeline-network:
    driver: bridge
